[x] Color theme
[x] Font
[x] Move to newly split windows, splitbelow, splitright
[] Change what evil considers to be a word (iskeyword)
[] Change which horiz movements can cross lines (whichwrap)
[x] Make tabs visible
[x] Break lines at 80 chars (auto-fill-mode)
[x] Disable temp files (auto save and backup files)
[] Truecolor for terminal? Not currently using terminal
[] Terminal configuration (neoterm, nvr)
[x] Remove trailing whitespace on write
[x] nerdcommenter
[] Enable manual indentation? See https://www.pement.org/emacs_tabs.htm#nothing for an
explanation and note that a better option may be to improve a mode's autoindentation.
[] Fix tab. Currently it doesn't tab at all. Indentation seems to be forced in lisp mode.
[] undotree
[] vim-clap
[] floating terminal
[] vimwiki
[] grep commands (bind to spc f g)
[] R (polymode and ess; note polymode has its own website similar to lsp-mode)
[] python (emacs-jupyter?)
[x] Replicate coc.nvim
[x] Floating help next to completion items: company-box!
[x] Callable help: lsp-ui-doc-glance and company-show-doc-buffer
[x] Scrollable help: custom lisp function
[x] Fuzzy file finder that searches all subdirs? See counsel-fzf
[] Make graphical emacs not started from Terminal use $PATH in exec-path
See https://github.com/purcell/exec-path-from-shell
[] Ensure page breaks are enabled such that ^H isn't visible in help(?) docs
[] mode-line-format customization?
[x] Highlight parens (see show-paren-mode and evil-highlight-closing-paren-at-point states)
[x] Customize background,foreground face for show-paren-mode
[] Does evil-highlight-closing-paren-at-point affect this?
[] Improve company selected completion item face for this theme (it's barely visible)
NOTE: Appears to only affect the WSL version of emacs...
[] Update plugins and __init.el
[] Review ivy/counsel/swiper changelog, wiki, and external website to see what's changed
and what I missed the first time I started using emacs. E.g., I bound both fzf and
jump to my files hydra, even though they are presumably similar commands.
[] counsel-el is deprecated. (Try running the command for suggested fix).
Change the binding at the bottom of init.el

* installation
** emacs
*** [[info:efaq#Installing Emacs][From source]]
To get the latest version, install from alpha.gnu.org/gnu/emacs/pretest. If installing .xz instead of .gz, drop the -g flag.

*** [[https://launchpad.net/~kelleyk/+archive/ubuntu/emacs][Ubuntu]]
#+BEGIN_SRC sh :tangle yes
  sudo add-apt-repository ppa:kelleyk/emacs
  sudo apt-get update
#+END_SRC

** hack font
*** [[https://github.com/source-foundry/Hack#quick-installation][Manual]]

*** Ubuntu
#+BEGIN_SRC sh :tangle yes
  sudo apt-get update
  sudo apt-get install fonts-hack
#+END_SRC

** ripgrep
* package manager
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; https://github.com/raxod502/straight.el#getting-started
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; https://github.com/raxod502/straight.el#integration-with-use-package
  ;; https://github.com/raxod502/straight.el#integration-with-use-package-1
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)

  ;; https://github.com/jwiegley/use-package#diminishing-and-delighting-minor-modes
  (use-package diminish)

  ;; Seems like it may be included with use-package
  ;; (require 'bind-key)
#+END_SRC

* miscellaneous
NOTE: Bug prevents use of :custom: https://github.com/jwiegley/use-package/issues/702. It's not clear if this was fixed by https://github.com/jwiegley/use-package/commit/b9f1fe64ee11cf99d84857d51ac74da36a0b744c. See also https://github.com/jwiegley/use-package/issues/517 Read through the thread and links of 702. The fix may not be a fix after all.  What does seem to work absolutely is to use custom-set-variables instead of :custom, set custom-file to a garbage file, then never load custom-file. That way the custom-file won't interfere with your init file custom-set-variable blocks. This suggests that it may have been fixed: https://github.com/jwiegley/use-package/pull/850 and https://github.com/jwiegley/use-package/commits/master (notice b9f1fe6 above
here). I may have to download the latest version from GitHub, since the commits are relatively new and likely not on elpa or melpa yet.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq custom-file "~/.emacs.d/emacs-custom.el")
  (load custom-file)

  (setq load-path (cons "~/.emacs.d/lisp" load-path))

  (setq-default default-directory "~/.emacs.d")

  ;; https://emacsthemes.com
  (use-package solarized-theme)
  (load-theme 'solarized-dark t)

  (set-frame-font "Hack 10" nil t)

  ;; Open links from host Windows OS when using WSL.
  (when (string-match "Linux.*Microsoft.*Linux"
                      (shell-command-to-string "uname -a"))
    (setq browse-url-generic-program "/mnt/c/Windows/System32/cmd.exe"
          browse-url-generic-args '("/c" "start" "")
          browse-url-browser-function 'browse-url-generic))

  ;; (add-to-list 'exec-path "/usr/local/bin")
  ;; (setq python-shell-interpreter "python3")))

#+END_SRC

** line wrapping
1. Default behavior is soft wrapping and word-splitting at the right window edge.
2. visual-line-mode soft wraps at right window edge and avoids word splitting.
3. auto-fill-mode hard wraps at fill-column, which can be displayed via display-fill-column-indicator-mode.
4. toggle-truncate-lines truncates lines instead of wrapping.

Numerous modes should not hard-wrap: org-mode to avoid having to format each line where text with formatting (e.g., bolding) runs across multiple lines; Rmarkdown, since some output formats (e.g., Word) do not hard-wrap paragraph blocks; and terminals.

org-indent-mode indents nested lines and shows column 0 at the indented position, not at the start of the line. So technically there should be a fill line for each indented section. The text is still wrapping at fill-column amount of characters; however, it doesn't appear that way because fill-column doesn't adjust the displayed indicator for indented org sections. Thus, even if soft wrapping were enabled, you would want to disable the fill indiciator.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Default to hard wrapping at lines at column 80 in all modes
  (setq-default auto-fill-function 'do-auto-fill)
  (setq-default fill-column 120)

  (defun no-auto (&optional wrap-mode)
      "Disable auto fill and indicator for specific modes"
    (turn-off-auto-fill) ; (auto-fill-mode -1)
    (display-fill-column-indicator-mode -1)
    (if wrap-mode
        (funcall wrap-mode)))

  (add-hook 'org-mode-hook (lambda () (no-auto 'visual-line-mode)))
  (add-hook 'markdown-mode-hook (lambda () (no-auto 'visual-line-mode)))
  (add-hook 'term-mode-hook (lambda () (no-auto) (toggle-truncate-lines 1))) ; Fish shell in ansi-term
  (add-hook 'custom-mode-hook (lambda () (no-auto)))
#+END_SRC

*** Sources
  1. https://www.gnu.org/software/emacs/manual/html_node/emacs/Continuation-Lines.html#Continuation-Lines
  2. https://www.gnu.org/software/emacs/manual/html_node/efaq/Turning-on-auto_002dfill-by-default.html

*** TODO Investigate how auto-fill-mode interacts with auto-fill-function and which modes set values other than 'do-auto-fill
*** TODO Rewrite no-auto for term-mode-hook

* general
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package general
    :config
    (general-create-definer my-leader
      :states '(motion insert emacs)
      :prefix "SPC"
      :non-normal-prefix "C-SPC")

    ;; Top-level mappings
    (my-leader
      "" nil ; Unbinding the prefix itself prevents errors about binding to non-prefix keys somehow
      "." 'clm/toggle-command-log-buffer
      "&" 'async-shell-command
      "e" 'eshell
      "f" '(:prefix-command my/files-map :wk "files")
      "t" 'ansi-term)

    ;; Files
    (general-def my/files-map
      :wk-full-keys nil ; Allows for consistent wk replacement text during cyclical map navigation
      "b" '(:prefix-command my/bookmarks-map :wk "bookmarks")
      "i" 'insert-file)

    ;; Bookmarks
    (general-def my/bookmarks-map
      :wk-full-keys nil
      "d" 'bookmark-delete
      "e" 'edit-bookmark
      ;; For each map referencing `my/files-map' we need `:wk' "files"
      "f" '(my/files-map :wk "files")
      "r" 'bookmark-rename
      "s" 'bookmark-set)

    ;; Help
    (general-unbind help-map "C-d" "s" "B" "C" "L" "g" "h" "n" "M-c" "RET" "C-n" "C-p" "C-t" "C-\\")
    (general-def help-map
      "M" 'describe-minor-mode
      "s" 'counsel-describe-symbol))
#+END_SRC

** TODO Configure buffer/window of output from async-shell-command
** TODO Play around with bookmarks sometime. How can they be used in addition to fzf, ripgrep (rg), and other search commands?
Possibly b/c the latter tend to operate in the current directory, while bookmarks can jump directories.

* which-key
which-key is the only package in .emacs.d/elpa / not installed by straight.el. I reverted to an earlier version due to issue 257, which prevented renaming which-key entries properly.

This package, like hydra, is demanded to make its functions and variables available to other packages in their :init and :config

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package which-key
    :diminish which-key-mode
    :demand t
    :general (:keymaps 'help-map
                       "C-h" nil ; Enable which-key navigation of help-map bindings
                       "C-w" 'which-key-show-keymap)
    :config
    (defun disable-transient-map-temporarily (orig-fun &rest args)
      "Hide which-key popup for certain transient maps"
      (if which-key-show-transient-maps
          (progn
            (setq which-key-show-transient-maps nil)
            (apply orig-fun args)
            (setq which-key-show-transient-maps t))
        (apply orig-fun args))))
#+END_SRC

* hydra
To enable which-key paging, hydras must be pink. Otherwise you can still page to find what you want, but this will exit the hydra. You will have to reenter all prefix keys again to reach the desired binding.

For a given hydra, defhydra needs to be evaluated prior to all defhydra+. The use-package declaration where a hydra is defined must thus be loaded before the package that extends a hydra, assuming all the hydras are defined within ~:config~. Some of use-package's keywords imply ~:defer t~, so [[https://github.com/jwiegley/use-package#loading-packages-in-sequence][loading order]] of packages is not guaranteed without using (1) ~:after <pkg-list>~ or (2) ~:demand t~ combined with the desired order of use-package declarations. This works if you know that all of these packages will be loaded; however, it prevents the scenario where only some packages load and skip hydra-related code altogether if hydra hasn't loaded, or skip ~defhydra+~ declarations in a loading package when the hydra declaration is in an unloaded package. Another option is to simply split out the hydra definitions from the use-package declarations. Or we can specify the order in ~:config~ of hydra, using ~with-eval-after-load~. Or we can figure out a way to make everything autoload?


Any hydras that reference each other need to wait to call my/defhydra until after both hydras have been defined. This is a current limitation of my/defhydra that may be remedied in the future. Also, the name of the function should be changed, if I can't figure out a way to use my/defhydra as advice for defhydra at some point.

Apparently hydras can be defined in the ~:init~ of ~(use-package hydra)~, which makes no sense to me. ~defhydra~ isn't available before hydra loads, so how can we use it right away?


#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package hydra
    ;:commands hydra-r/body
    :demand t
    :hook (ess-r-mode . ess-r-mode-hydras)
    :general
    (my-leader
      "b" 'hydra-buffer/body
      "w" 'hydra-window/body)
    ;; Add opinionated counsel-hydra-heads to all hydras (see :config)
    (:keymaps 'hydra-base-map "." 'counsel-hydra-heads)
    :config
    ;; Display hydras in which-key
    (with-eval-after-load "which-key"
      (load "which-key-hacks"))

    ;; Modify the function provided by counsel to search through hydras
    (with-eval-after-load "counsel"
      (defun counsel-hydra-integrate (old-func &rest args)
        "Function used to advise `counsel-hydra-heads' to work with blue and amranath hydras."
        (hydra-keyboard-quit)
        (apply old-func args)
        (funcall-interactively hydra-curr-body-fn))
      (advice-add 'counsel-hydra-heads :around 'counsel-hydra-integrate))

    (load "my-hydras")
    (my/defhydra 'hydra-window) ; Requires my-hydras.el, which-key-hacks.el
    (my/defhydra 'hydra-buffer)
    (defun ess-r-mode-hydras ()
      "Hook for ess-r-mode. The functions used as hydra heads do not exist until an ess-r-mode buffer exists, so
    my/defhydra must be called after that buffer is created."
      (my/defhydra 'hydra-r)
      (my/defhydra 'hydra-r-help)
      (my/defhydra 'hydra-r-eval)
      (my/defhydra 'hydra-r-debug)))
#+END_SRC

* vim emulation
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package undo-fu) ; Required for undo/redo operations

  (use-package evil-tutor :after evil
    :general (:keymaps 'help-map "T" 'evil-tutor-start))

  (use-package evil-escape
    :after evil
    :diminish evil-escape-mode
    :config (evil-escape-mode))

  ;; (use-package evil-surround :after evil)

  (use-package evil
    :config
    ;; (defalias 'evil-insert-state 'evil-emacs-state)    ; Alternative to disabling insert-state bindings
    (setq evil-normal-state-modes
          '(lisp-interaction-mode                         ; *scratch*
            emacs-lisp-mode
            python-mode
            ess-r-mode
            markdown-mode
            fundamental-mode
            lua-mode
            org-mode
            SAS-mode)
          evil-insert-state-modes
          '(inferior-ess-r-mode))
    (with-eval-after-load "which-key"
      (advice-add 'evil-search-forward :around 'disable-transient-map-temporarily)
      (advice-add 'evil-search-backward :around 'disable-transient-map-temporarily))
    (evil-mode))
#+END_SRC

* Fuzzy UI
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Was having issues with history, sorting, filtering in ivy using smex (M-x)
  ;; and/or flx (ivy in general), so I tried out prescient instead. The latter
  ;; has a definite history file it can read and write to.
  ;; (use-package smex)
  ;; (use-package flx)
  ;; TODO: Look into selectrum to replace ivy/counsel
  (use-package prescient)
  (use-package ivy-prescient)
  (use-package ivy :diminish ivy-mode)
  ;; Usage within minibuffer: C-h m
  ;; Accept current candidate: C-j
  ;; Accept current input: C-M-j
  (use-package counsel ;; Installs and loads ivy and swiper as dependencies
    :diminish counsel-mode
    :demand t
    :general
    (my-leader
      "SPC" 'counsel-M-x
      "'" 'ivy-resume)
    (:keymaps 'my/files-map
              ;; TODO: Add an action to change dir similar to C-u
              "f" 'counsel-fzf ; C-u prompts for directory selection
              ;; https://beyondgrep.com/feature-comparison/
              "g" 'counsel-rg ; C-x C-d to change directory
              "m" 'counsel-recentf)
    (:keymaps 'my/bookmarks-map
              "D" 'counsel-bookmarked-directory
              ;; TODO: Customize counsel-bookmark action list to include delete, rename, and set
              "j" 'counsel-bookmark)
    (:keymaps 'ivy-minibuffer-map
              "M-m"  'ivy-mark
              "M-u"  'ivy-unmark
              ;; For counsel-find-file, RET should add dir to search path instead of pulling up dired
              [remap ivy-done] 'ivy-alt-done
              [remap ivy-alt-done] 'ivy-done)
  ;; counsel-grep
  ;; counsel-org-file
    :config
    (setq ivy-re-builders-alist '((t . ivy--regex-fuzzy))
          ivy-help-file "~/.emacs.d/ivy-help.org"))
#+END_SRC

* Comments
See the README for examples, evil usage, and tips

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package evil-nerd-commenter
    :after (:all evil counsel)
    :general (my-leader
               "c" '(:ignore t :wk "comments")
               "cc" 'evilnc-comment-or-uncomment-lines
               "cC" 'evilnc-copy-and-comment-lines
               "ci" 'counsel-imenu-comments
               ;; When given C-u <n>, will forward-match <n> against the rightmost
               ;; digits of each line. E.g., on line 160, C-u <72> will target lines
               ;; 160-172
               "cl" 'evilnc-quick-comment-or-uncomment-to-the-line
               "cp" 'evilnc-comment-or-uncomment-paragraphs
               "cy" 'evilnc-comment-and-kill-ring-save
               ;; Whether empty lines can be commented as part of a selection
               "ce" 'evilnc-toggle-comment-empty-lines
               ;; When toggled off, all lines in a selection are commented if any
               ;; uncommented lines are included. Note that blank lines never count
               "cv" 'evilnc-toggle-invert-comment-line-by-line
               "c," 'evilnc-comment-operator
               "c." 'evilnc-copy-and-comment-operator)
    :config
    (defun counsel-imenu-comments ()
      "Use counsel to display comments in current buffer"
      (interactive)
      (let* ((imenu-create-index-function 'evilnc-imenu-create-index-function))
        (unless (featurep 'counsel) (require 'counsel))
        (counsel-imenu))))
#+END_SRC

* org
#+BEGIN_SRC emacs-lisp :tangle yes

  ;; TODO: Investigate projectile
  ;; https://docs.projectile.mx/projectile/index.html
  (use-package projectile
    :general (my-leader "p" 'projectile-command-map))

  ;; TODO: Investigate org-projectile source code (the docs are sparse)
  (use-package org-projectile
    :config
    (org-projectile-per-project) ; Per-project org files
    ;; Add all org files contained in projectile directories to org-agenda-files
    (setq org-agenda-files (append org-agenda-files projectile-known-projects))
    ;; Adds a TODO capture template activated by letter p (see org-capture) that
    ;; captures to <current-project>/TODO.org for org-capture or
    ;; <selected-project>/TODO.org for org-projectile-todo-completing-read
    ;; and replaces the default t(ask) template stored in ~/.notes normally
    (push (org-projectile-project-todo-entry) org-capture-templates))


  (use-package async)
  (use-package popup)
;; Installed from source per Wiki instructions
(use-package helm)


  (use-package dash)
  (use-package f)
  (use-package s)
  (use-package helm-org-rifle)

  ;; TODO: Investigate later:
  ;; sparse trees (e.g., to hide finished tasks)
  ;; drawers
  ;; blocks
  ;; links
  ;; todo subsequences
  ;; habits
  ;; priorities
  ;; cookies [%]
  ;; tags
  ;; properties
  ;; column view
  ;; details for dates and times, including clocking
  ;; refile, archive, capture refile and templates
  ;; working with attachments
  ;; agenda onward
  ;; diary

  ;;;; TODO:
  ;; Find command to add repeating timers rather than editing manually
  ;; Make RET convert plain text under cursor or selected to link. Currenlty it
  ;; only follows existing links, so one-half vimwiki functionality
  ;;;;; Bind the following:
  ;; org-set-property-and-value: sets property block
  ;; org-delete-property
  ;; C-u c-u c-u c-t: change todo state, regardless of state blocking (like
  ;; ordered property)
  ;; org-check-deadlines (c-c / d): show past-due or do within
  ;;      org-deadline-warning-days Reminders can be appended; e.g., <2004-02-29
  ;;      -5d> uses a 5-day advance notice Positives (+5m) indicate repeaters
  ;;      (repeating tasks). These must come before reminders.
  ;; org-check-before-date (c-c / b): checks deadliens and scheduled items before
  ;; date
  ;; org-check-after-date (c-c / a)
  ;; https://www.spacemacs.org/layers/+emacs/org/README.html

  (load "my-org-functions.el")
  (add-hook 'org-after-todo-statistics-hook 'my/org-summary-todo)

  (my-leader "o" '(:prefix-command my/global-org-map :wk "org-global"))
  (defun my/org-programming ()
    (interactive)
    (my/org-file org-directory "programming.org"))
  (defun my/org-home ()
    (interactive)
    (my/org-file org-directory "home.org"))
  (defun my/org-work ()
    (interactive)
    (my/org-file "/mnt/d/org" "work_diary.org"))
  (setq org-agenda-files (append org-agenda-files "mnt/d/org"))
  (general-def my/global-org-map
    :wk-full-keys nil
    ;; Insert LaTeX-like symbols
    "a" 'org-agenda ; Dispatcher
    "e" 'counsel-org-entity ; https://orgmode.org/manual/Special-Symbols.html
    "l" 'org-insert-link-global
    ;; "o" 'org-open-at-point-global
    "o" '(:ignore t :wk "org-files")
    ;; "ow" '
    "op" 'my/org-programming
    "oh" 'my/org-home
    "ow" 'my/org-work
    ;; Capture to org-default-notes-file
    "c" 'counsel-org-capture
    ;; org-projectile-capture-for-current-project
    ;; NOTE: May not list all projects known by org-agenda since it relies on
    ;; projectile-relevant-known-projects and org-projectile-projects-file
    "p" 'org-projectile-project-todo-completing-read)

  ;; For some reason, this doesn't work if added to general-define-key below
  (evil-define-key 'normal org-mode-map
    (kbd "DEL") 'org-mark-ring-goto)
    ;; (kbd "DEL")
    ;; (lambda ()
    ;;   (interactive)
    ;;   (if (equal 1 (length (seq-uniq (cl-subseq org-mark-ring 0
    ;;                                             org-mark-ring-length))))
    ;;       (evil-backward-char)
    ;;     (org-mark-ring-goto))))

  ;;;; Existing bindings that I didn't change:
  ;; C-c ' (org-edit-src-code and org-edit-src-exit)
  ;; tab (org-cycle)
  ;; S-tab (global-org-cycle)
  ;;;;; Stucture (list/heading) editing
  ;; org-meta-return (m-ret): insert heading or item at current level
  ;;     org-insert-heading
  ;; org-insert-heading-respect-content (c-ret): Insert heading at end of subtree
  ;;     org-insert-heading-after-current
  ;; org-insert-todo-heading (m-s-ret): insert todo heading or checkbox item
  ;; org-insert-todo-heading-respect-content (c-s-ret): Insert todo heading at end of subtree
  ;; org-insert-subheading: Insert subheading
  ;; org-insert-todo-subheading
  (add-hook 'org-mode-hook
            (lambda ()
              (general-define-key
              :states 'motion
              :keymaps 'org-mode-map
              "RET" 'my/org-open-at-point-in-emacs
              "g" '(:ignore t :wk "Entry navigation")
              "gh" 'outline-previous-visible-heading
              "gl" 'outline-next-visible-heading
              "gk" 'org-backward-heading-same-level
              "gj" 'org-forward-heading-same-level)
              "U" 'outline-up-heading ; Navigate up a heading level
              (general-define-key
               :states '(motion insert)
              "M-h" 'org-metaleft ; Promote/dedent heading/list item
              "M-l" 'org-metaright ; Demote/indent heading/list item
              "M-j" 'org-shiftmetadown ;; Move heading or list item down
              "M-k" 'org-shiftmetaup
              "M-H" 'org-shiftmetaleft ;; Like metaleft for subtrees/sublists
              "M-L" 'org-shiftmetaright
              "M-J" 'org-metadown ;; Move subtree/sublist up/down
              "M-K" 'org-metaup
              ;; Respects lists when filling
              "M-q" 'org-fill-paragraph)))

  (general-define-key
   :prefix-command 'my/org-map
   ;; Highly varied. For list items, with prefix create checkbox else toggle
   ;; May affect multiple lines if on bullet point of outermost sublist's first
   ;; item. For cookies, update statistics.
   "SPC" 'org-ctrl-ctrl-c
   "." 'org-time-stamp ; Create or update existing timestamp
   "," 'org-insert-structure-template ; E.g. src block
   "d" 'org-deadline ; Insert deadline keyword with timtestamp
   "f" 'counsel-org-file ; Show attachments for current file
   ;; Not clear what the diff is b/w counsel-org-goto and counsel-org-goto-all,
   ;; except taht that latter produces more candidates
   "g" 'counsel-org-goto-all
   "s" 'org-schedule ; Insert schedule keyword with timestamp
   "!" 'org-time-stamp-inactive
   "I" 'org-clock-in
   "O" 'org-clock-out
   "Q" 'org-clock-cancel
   "^" 'org-sort ; Sort headings or list items
   "*" 'org-ctrl-c-star ; Complex (de)convert/toggle to heading
   "@" 'org-mark-subtree ; I was too lazy to look at yanking/pasting
   ;; Complex convert to list item(s) or cycle list level through bullet types
   "-" 'org-ctrl-c-minus
   "A" 'org-toggle-archive-tag ; Tag subtrees as non-tab-expandable
   "a" 'org-attach
   ;; Insert link or edit invisible URL portion of existing link with a
   ;; description. Backspace at beginning or end of displayed description will
   ;; remove start or end brackets, revealing the invisble portion of the link.
   ;; Selected text when inserting becomes link description.
   "l" 'org-insert-link
   "n" 'org-next-link
   ;; When calling in org file, link points to the current headline of file. For
   ;; other files, points to current line.
   "S" 'org-store-link
   ;; Headings whose parent has this property can not be marked done until
   ;; siblings on earlier lines are done
   "o" 'org-toggle-ordered-property
   ;; Cycle keywords. If switching from TODO to DONE for a repeating task, update
   ;; the timestamp by the amount of the repeater, and reset the keyword to
   ;; TODO. In contrast, C-- 1 C-c C-t permanently finishes the repeating
   ;; task. Repeating tasks are indicated as e.g. +5d, while alerts/reminders as
   ;; e.g. -4m. If you miss several due dates, you may want to update the
   ;; timestamp only once for all of these missed deadlines to a future date. This
   ;; requires ++ instead of +. The .+ repeater likewise updates to a future date,
   ;; but the new timestamp is relative to the completion time rather than the
   ;; timestamp. Both deadlines and schedules can have repeaters.
   "t" 'org-todo
   ;; Cycle heading keywords or list bullet types, or change timestamp by a day
   "H" 'org-shiftleft
   "L" 'org-shiftright
   ;; Move between list items of the same level
   "J" 'org-shiftdown
   "K" 'org-shiftup)

  (my-leader :keymaps 'org-mode-map "m" 'my/org-map)
#+END_SRC

* Company
When used with lsp-mode, company-box provides custom icons and popup documentation to the right of completion items, similar to coc.nvim.

For the love of God, global-company-mode is being modified outside of the custom system, but I cannot fucking figure out where from! I had to ditch it in favor of individual mode activation in :hook. I also couldn't override universal company box mode ~:hook (company-mode . company-box-mode)~, so I switched that to a per-mode setting.

I disabled ess-r-mode's use of company-box, because the latter would prompt for resolution between objects of the same name in different packages, which was extremely aggravating when using the tidyverse.

#+begin_src emacs-lisp :tangle yes
  (use-package company
    :init
    (defun mode-specific-C-h ()
      "Programming language-specific help for company-active-map"
      (interactive)
      (pcase major-mode
        ('ess-r-mode (show-company-doc-as-ess-help))
        (_ (company-show-doc-buffer))))

    (defun show-company-doc-as-ess-help ()
      "Show ess help if available, else show company help"
      (interactive)
      (let* ((selected (nth company-selection company-candidates))
             (obj-help (ess-display-help-on-object selected)))
        (unless obj-help
          (company-show-doc-buffer))))
    :hook
    (emacs-lisp-mode . company-mode)
    (ess-r-mode . company-mode)
    :general
    (:keymaps 'company-mode-map
              "<tab>" 'company-indent-or-complete-common)
    (:keymaps 'company-active-map
              "C-h" 'mode-specific-C-h
              "M-n"  nil
              "M-p"  nil
              "C-n"  'company-select-next
              "C-p"  'company-select-previous))

  (use-package company-box
    :diminish company-box-mode
    :hook
    ;;When ess-eldoc-mode is enabled, it vanishes the company completion menu, at least with company-box enabled.
    ;; Did it affect lsp-based company completion? Test this if you ever reenable lsp-mode for ess-r.
    ;;(ess-r-mode . (lambda () (setq ess-eldoc-mode -1)))
    (emacs-lisp-mode . company-box-mode))
#+end_src

* LSP
The VOC inventory .Rmd report was crashing lsp-r for unknown reasons. It could be the size of the file, latex, lsp-mode itself, the R language server, or something else. Note that without lsp-mode, to get full completion you will need to evaluate the loaded libraries in an iess-r buffer, as well as any objects you want completed. Test whether this has been fixed by issue 1383 sometime.

#+BEGIN_SRC emacs-lisp :tangle no
  ;; (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  ;; (use-package lsp-treemacs :commands lsp-treemacs-error-list)
  ;; (use-package dap-mode)
  ;; (require 'dap-python)
  ;; Testing out for parameter completion in lsp...
  ;; (use-package yasnippet
  ;;   :hook ((python-mode . yas-minor-mode)
  ;;          (ess-r-mode . yas-minor-mode)))

  (use-package lsp-mode
    :hook ((python-mode . lsp)
           ;; (ess-r-mode . lsp)
           (lsp-mode . lsp-enable-which-key-integration))
    ;; :commands lsp
    :config
    (setq read-process-output-max (* 1024 1024)
          lsp-prefer-capf t
          lsp-idle-delay 0.500))

  (use-package lsp-ui
    :commands lsp-ui-mode
    :config
    (defun scroll-down-lsp-ui ()
      "Enable scrolling documentation child frames when using lsp-ui-doc-glance"
      (interactive)
      (if (lsp-ui-doc--frame-visible-p)
          (let ((kmap (make-sparse-keymap)))
            (define-key kmap (kbd "q")
              '(lambda ()
                 (interactive)
                 (lsp-ui-doc-unfocus-frame)
                 (setq overriding-terminal-local-map nil)
                 (setq which-key-show-transient-maps t)))
            (setq which-key-show-transient-maps nil)
            (setq overriding-terminal-local-map kmap)
            (lsp-ui-doc-focus-frame)))
      (evil-scroll-page-down 1))
    (general-define-key
     :states '(motion insert emacs)
     "C-f" 'scroll-down-lsp-ui)
    ;; Disable underlines in lsp-ui-doc child frames
    (custom-set-faces '(nobreak-space ((t nil)))))
#+END_SRC

** TODO Finish setting up lsp package extensions,
** TODO Test DAP for R and Python

* elisp
#+BEGIN_SRC emacs-lisp :tangle yes
  (general-define-key
   :prefix-command 'my/elisp-map
   "c" 'check-parens            ; Debugging "End of file during parsing"
   ;; evals outermost expression containing or following point
   ;; ...and forces reset to initial value within a defvar,
   ;; defcustom, and defface expressions
   "d" 'eval-defun
   "m" 'pp-eval-expression      ; "m" for minibuffer, where exp is evaluated
   "s" 'pp-eval-last-sexp       ; evals expression preceding point
   "i" 'eval-print-last-sexp    ; "i" for insert(ing result)
   "r" 'eval-region)

  ;; "<backtab>" 'counsel-el ; counsel-assisted completion
  (my-leader :keymaps 'emacs-lisp-mode-map "m" 'my/elisp-map)
#+END_SRC

* R(markdown)
  Major-mode binding (i.e., ~(my-leader :keymaps 'ess-r-mode-map "m" 'hydra-r/body)~) is more efficient than buffer-local binding (i.e., ~(my-leader :keymaps 'local "m" 'hydra-r/body)~) in the body of a hook (i.e., ~config-ess-r-mode~).

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ess
    :general
    (my-leader :keymaps 'ess-r-mode-map "m" 'hydra-r/body)
    :hook (ess-r-mode . config-ess-r-mode)
    :init
    (defun config-ess-r-mode ()
      (ess-set-style 'RStudio)
      ;; (setq-local ess-indent-offset 4) ; RStudio style uses a value of 2

      ;; Rely on electric-pair-mode instead of skeleton
      (local-set-key (kbd "{") 'self-insert-command)
      (local-set-key (kbd "}") 'self-insert-command)

      ;; electric-layout-rules interferes with ess-roxy-newline-and-indent
      ;; if electric-layout-mode is enabled (it is not by default)
      (setq-local electric-layout-rules nil))
    :config
    ;; Prevent window displaying company documentation buffer from vanishing when invoking a binding not in company--electric-commands
    ;; (defun forget-saved-window-config ()
    ;;   (setq company--electric-saved-window-configuration nil))
    ;; (advice-add 'company-pre-command :before 'forget-saved-window-config)

    ;; Override Windows' help_type option of "html", to open help in help buffer, not browser (see contents of .Rprofile)
    (pcase system-type
      ('windows-nt
       ;; iESS searches the paths listed in the variable exec-path for inferior-ess-r-program
       (add-to-list 'exec-path "c:/Users/jkroes/Documents/R/R-3.6.2/bin")
       ;; Sets R_USER and R_LIBS_USER
       (setenv "R_USER" "c:/Users/jkroes/Documents")
       ;; run-ess-r fails when this is set to Rterm
       (setq inferior-ess-r-program "R")
       (setenv "R_PROFILE_USER" "C:/Users/jkroes/.emacs.d/.Rprofile")
       ;; RStudio downloads pandoc with rmarkdown, but outside of RStudio
       ;; you need to notify R of the executable's directory
       (setenv "RSTUDIO_PANDOC" "C:/Users/jkroes/AppData/Local/Pandoc"))
      ('darwin (setenv "R_PROFILE_USER" "~/.emacs.d/.Rprofile")))

    (setq ess-nuke-trailing-whitespace-p t
          ;; ess-S-quit-kill-buffers-p 'ask
          inhibit-field-text-motion nil)) ; prompt acts as beginning of line if prompt is read-only

  (use-package poly-markdown)
  ;; NOTE: ess-r configuration and bindings are available inside chunks, where R-mode is active
  ;; I have bound polymode-export (render) to SPC-m-e-k
  (use-package poly-R)
#+END_SRC

* Terminal
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Modified ansi-term to avoid read-from-minibuffer prompt
  (setq explicit-shell-file-name "/usr/bin/fish")

  (defun clear-shell ()
    (interactive)
    (let ((old-max comint-buffer-maximum-size))
      (setq comint-buffer-maximum-size 0)
      (comint-truncate-buffer)
      (setq comint-buffer-maximum-size old-max)))

  (global-set-key  (kbd "\C-x c") 'clear-shell)

  ;; TODO: Throws an error on window. Commenting out in the meantime.

  ;; (defun ansi-term (program &optional new-buffer-name)
  ;;   "Start a terminal-emulator in a new buffer.
  ;; This is almost the same as `term' apart from always creating a new buffer,
  ;; and `C-x' being marked as a `term-escape-char'."
  ;; (interactive (list (or explicit-shell-file-name (getenv "ESHELL") shell-file-name)))

  ;;   ;; Pick the name of the new buffer.
  ;;   (setq term-ansi-buffer-name
  ;;     (if new-buffer-name
  ;;         new-buffer-name
  ;;       (if term-ansi-buffer-base-name
  ;;           (if (eq term-ansi-buffer-base-name t)
  ;;           (file-name-nondirectory program)
  ;;         term-ansi-buffer-base-name)
  ;;         "ansi-term")))

  ;;   (setq term-ansi-buffer-name (concat "*" term-ansi-buffer-name "*"))

  ;;   ;; In order to have more than one term active at a time
  ;;   ;; I'd like to have the term names have the *term-ansi-term<?>* form,
  ;;   ;; for now they have the *term-ansi-term*<?> form but we'll see...

  ;;   (setq term-ansi-buffer-name (generate-new-buffer-name term-ansi-buffer-name))
  ;;   (setq term-ansi-buffer-name (term-ansi-make-term term-ansi-buffer-name program))

  ;;   (set-buffer term-ansi-buffer-name)
  ;;   (term-mode)
  ;;   (term-char-mode)

  ;;   ;; Historical baggage.  A call to term-set-escape-char used to not
  ;;   ;; undo any previous call to t-s-e-c.  Because of this, ansi-term
  ;;   ;; ended up with both C-x and C-c as escape chars.  Who knows what
  ;;   ;; the original intention was, but people could have become used to
  ;;   ;; either.   (Bug#12842)
  ;;   (let (term-escape-char)
  ;;     ;; I wanna have find-file on C-x C-f -mm
  ;;     ;; your mileage may definitely vary, maybe it's better to put this in your
  ;;     ;; .emacs ...
  ;;     (term-set-escape-char ?\C-x))

  ;;   (switch-to-buffer term-ansi-buffer-name))
#+END_SRC

* Random packages
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package page-break-lines)
  ;; (use-package osx-browse)
  ;; Potential ideas for fixing indentation? Didn't work when tried:
  ;; https://stackoverflow.com/questions/4643206/how-to-configure-indentation-in-emacs-lua-mode
  ;; https://github.com/kengonakajima/lua-mode/blob/master/my-lua.el
  ;; Turning off lua-electric-flag via setq-local in a hook
                                          ; (use-package lua-mode)
                                          ; (use-package jupyter)
  (use-package ranger
    :general (my-leader "r" 'deer)
    :config (ranger-override-dired-mode t))

  (use-package command-log-mode
    :diminish command-log-mode
    ;; Auto-scroll buffer as commands are logged
    :hook (command-log-mode . (lambda ()
                                (set (make-local-variable 'window-point-insertion-type) t)))
    :config (global-command-log-mode))

  (use-package ace-window)
#+END_SRC

** TODO Ranger launches in ansi-term but opens files in nano(?). Find a way to integrate it so you can open files in the buffer occupied by ansi-term/ranger instead, then replace deer.

* Hacks
I started experiencing constant messages about a missing function, something
about org and timer. straight.el mentioned org-related issues, and this issue
arose once I switched to straight. Probably related somehow. No idea how this
fixes it, but the messages disappeared.
Solution from https://github.com/seagle0128/.emacs.d/issues/129.
NOTE: Issue disappeared recently.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (org-reload)
#+END_SRC

* Local Variables
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:
